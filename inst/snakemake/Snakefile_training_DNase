
# CONFIGURATION ---------------------------------------------------------------
configfile: 'config/config_Duke.yaml'

REF_GENOME_DIR = config['ref_genome_dir']
MOTIF_DIR = config['motif_dir']
BLACKLIST_DIR = config['blacklist_dir']
ENCODE_DATA_DIR = config['encode_data_dir']
OUT_DIR = config['out_dir']
DNASE_DATA_DIR = config['dnase_data_dir']
CHIP_DATA_DIR = config['chip_data_dir']
LOG_DIR = config['log_dir']
METADATA_DIR = config['metadata_dir']

# Global settings -------------------------------------------------------------
DATA_TYPE = config['data_type']
THRESH_PVALUE = config['thresh_pvalue']
VER_GENOME = config['ver_genome']
BIN = config['bin']
MOTIF_SET = config['motif_set']
CHIP_REF_SIZE = config['chip_ref_size']
DNASE_REF_SIZE = config['dnase_ref_size']

# Load training data from metadata table ---------------------------------------------------------
import pandas as pd

METADATA_TABLE_FILE = f'{METADATA_DIR}/{VER_GENOME}/{DATA_TYPE}_{MOTIF_SET}_training_data_table.tsv'
metadata_table = pd.read_csv(METADATA_TABLE_FILE, sep='\t')

ALL_TRAINING_TFS = metadata_table['tf_name'].tolist()
ALL_TRAINING_PWMIDS = metadata_table['pwm_id'].tolist()
ALL_TRAINING_CELLTYPES = metadata_table['cell_type'].tolist()

# ChIP-seq replicates will be counted together(merged)
ALL_CHIP_TRAINING_SAMPLES = ';'.join(metadata_table['chip_file'].tolist()).split(';')

# whether DNase-seq data have replicates
max_rep_counts = max(metadata_table['dnase_file'].str.count(';') + 1)
if max_rep_counts == 1:
    ALL_DNASE_TRAINING_SAMPLES = metadata_table['dnase_file'].tolist()
else:
    ALL_DNASE_TRAINING_SAMPLES = ';'.join(metadata_table['dnase_file'].tolist()).split(';')

TRAINING_TF_SET = set(ALL_TRAINING_TFS)
TRAINING_CELLTYPE_SET = set(ALL_TRAINING_CELLTYPES)
TRAINING_DNASE_SET = set(ALL_DNASE_TRAINING_SAMPLES)
TRAINING_CHIP_SET = set(ALL_CHIP_TRAINING_SAMPLES)

# Single file patterns --------------------------------------------------------

REF_GENOME_FILE = f'{REF_GENOME_DIR}/{VER_GENOME}/{VER_GENOME}.fasta'
BLACKLIST_FILE = f'{BLACKLIST_DIR}/{VER_GENOME}_blacklist.bed.gz'
CHROM_SIZE_FILE = f'{REF_GENOME_DIR}/{VER_GENOME}/{VER_GENOME}.chrom.sizes'

PWM_FILE = f'{MOTIF_DIR}/{{pwm_id}}.meme'

FIMO_DIR = f'{OUT_DIR}/fimo_motif_matches/{VER_GENOME}/{MOTIF_SET}'
FIMO_FILE = f'{FIMO_DIR}/{{pwm_id}}_{THRESH_PVALUE}.fimo.txt'

SITES_DIR = f'{OUT_DIR}/candidate_sites/{VER_GENOME}/{MOTIF_SET}'
SITES_FILE = f'{SITES_DIR}/{{pwm_id}}_{THRESH_PVALUE}.candidate_sites.txt'

DNASE_BAM_DIR = f'{DNASE_DATA_DIR}/{DATA_TYPE}/{VER_GENOME}'
DNASE_BAM_FILE = f'{DNASE_BAM_DIR}/{{dnase_sample}}.bam'
DNASE_BAI_FILE = f'{DNASE_BAM_DIR}/{{dnase_sample}}.bam.bai'
DNASE_IDXSTATS_FILE = f'{DNASE_BAM_DIR}/{{dnase_sample}}.bam.idxstats.txt'

DNASE_GENOMECOUNTS_DIR = f'{OUT_DIR}/dnase_genome_counts/{VER_GENOME}/{DATA_TYPE}'
DNASE_GENOMECOUNTS_FWD_FILE = f'{DNASE_GENOMECOUNTS_DIR}/{{dnase_sample}}.fwd.genomecounts.bw'
DNASE_GENOMECOUNTS_REV_FILE = f'{DNASE_GENOMECOUNTS_DIR}/{{dnase_sample}}.rev.genomecounts.bw'

DNASE_COUNTMATRIX_DIR = F'{OUT_DIR}/dnase_motif_counts/{VER_GENOME}/{DATA_TYPE}/{MOTIF_SET}'
DNASE_COUNTMATRIX_FILE = f'{DNASE_COUNTMATRIX_DIR}/{{dnase_sample}}/{{pwm_id}}_{THRESH_PVALUE}.countmatrix.rds'

DNASE_NORMALIZED_COUNTMATRIX_FILE = f'{DNASE_COUNTMATRIX_DIR}/{{dnase_sample}}/{{pwm_id}}_{THRESH_PVALUE}.normalized_countmatrix.rds'
DNASE_BINS_FILE = f'{DNASE_COUNTMATRIX_DIR}/{{dnase_sample}}/{{pwm_id}}_{THRESH_PVALUE}.{BIN}_bins.rds'

CHIP_BAM_DIR = f'{CHIP_DATA_DIR}/{VER_GENOME}/bam'
CHIP_BAM_FILE = f'{CHIP_BAM_DIR}/{{chip_sample}}.bam'
CHIP_BAI_FILE = f'{CHIP_BAM_FILE}.bai'
CHIP_IDXSTATS_FILE = f'{CHIP_BAM_FILE}.idxstats.txt'

CHIP_COUNTS_DIR = F'{OUT_DIR}/chip_motif_counts/{VER_GENOME}/{MOTIF_SET}'
CHIP_COUNTS_FILE = f'{CHIP_COUNTS_DIR}/{{tf_name}}_{{pwm_id}}_{THRESH_PVALUE}.{{cell_type}}.normalized_chipcounts.rds'

COMBINED_DNASE_CHIP_DATA_DIR = F'{OUT_DIR}/combined_dnase_chip_data/{VER_GENOME}/{DATA_TYPE}/{MOTIF_SET}'
COMBINED_DNASE_CHIP_DATA_FILE = f'{COMBINED_DNASE_CHIP_DATA_DIR}/{{tf_name}}_{{pwm_id}}_{THRESH_PVALUE}.{{cell_type}}.{BIN}_bins.combined_data.rds'

# File lists ------------------------------------------------------------------

# All PWM IDs
ALL_PWM_IDS = ALL_TRAINING_PWMIDS
# All DNase samples
ALL_DNASE_SAMPLES = ALL_DNASE_TRAINING_SAMPLES
# All ChIP samples
ALL_CHIP_SAMPLES = ALL_CHIP_TRAINING_SAMPLES

ALL_PWM_FILES = expand(PWM_FILE, pwm_id = ALL_PWM_IDS)
ALL_FIMO_FILES = expand(FIMO_FILE, pwm_id = ALL_PWM_IDS)
ALL_SITES_FILES = expand(SITES_FILE, pwm_id = ALL_PWM_IDS)

ALL_DNASE_BAM_FILES = expand(DNASE_BAM_FILE, dnase_sample = ALL_DNASE_SAMPLES)
ALL_DNASE_BAI_FILES = expand(DNASE_BAI_FILE, dnase_sample = ALL_DNASE_SAMPLES)
ALL_DNASE_IDXSTATS_FILES = expand(DNASE_IDXSTATS_FILE, dnase_sample = ALL_DNASE_SAMPLES)

ALL_DNASE_GENOMECOUNTS_FWD_FILES = expand(DNASE_GENOMECOUNTS_FWD_FILE, dnase_sample = ALL_DNASE_SAMPLES)
ALL_DNASE_GENOMECOUNTS_REV_FILES = expand(DNASE_GENOMECOUNTS_REV_FILE, dnase_sample = ALL_DNASE_SAMPLES)

if max_rep_counts == 1:
    ALL_DNASE_COUNTMATRIX_FILES = expand(DNASE_COUNTMATRIX_FILE, zip, dnase_sample = ALL_DNASE_SAMPLES, pwm_id = ALL_PWM_IDS)
    ALL_DNASE_NORMALIZED_COUNTMATRIX_FILES = expand(DNASE_NORMALIZED_COUNTMATRIX_FILE, zip, dnase_sample = ALL_DNASE_SAMPLES, pwm_id = ALL_PWM_IDS)
    ALL_DNASE_BINS_FILES = expand(DNASE_BINS_FILE, zip, dnase_sample = ALL_DNASE_SAMPLES, pwm_id = ALL_PWM_IDS)
else:
    ALL_DNASE_COUNTMATRIX_FILES = expand(DNASE_COUNTMATRIX_FILE, dnase_sample = ALL_DNASE_SAMPLES, pwm_id = ALL_PWM_IDS)
    ALL_DNASE_NORMALIZED_COUNTMATRIX_FILES = expand(DNASE_NORMALIZED_COUNTMATRIX_FILE, dnase_sample = ALL_DNASE_SAMPLES, pwm_id = ALL_PWM_IDS)
    ALL_DNASE_BINS_FILES = expand(DNASE_BINS_FILE, dnase_sample = ALL_DNASE_SAMPLES, pwm_id = ALL_PWM_IDS)

ALL_CHIP_BAM_FILES = expand(CHIP_BAM_FILE, chip_sample = ALL_CHIP_SAMPLES)
ALL_CHIP_BAI_FILES = expand(CHIP_BAI_FILE, chip_sample = ALL_CHIP_SAMPLES)
ALL_CHIP_IDXSTATS_FILES = expand(CHIP_IDXSTATS_FILE, chip_sample = ALL_CHIP_SAMPLES)

ALL_CHIP_COUNTS_FILES = expand(CHIP_COUNTS_FILE, zip, tf_name = ALL_TRAINING_TFS,
                               pwm_id = ALL_TRAINING_PWMIDS, cell_type = ALL_TRAINING_CELLTYPES)

ALL_COMBINED_DNASE_CHIP_DATA_FILES = expand(COMBINED_DNASE_CHIP_DATA_FILE, zip, tf_name = ALL_TRAINING_TFS,
                                            pwm_id = ALL_TRAINING_PWMIDS, cell_type = ALL_TRAINING_CELLTYPES)

# TRAINING_DATA_DIR = F'{OUT_DIR}/assembled_training_data/{VER_GENOME}/{DATA_TYPE}/{MOTIF_SET}'
# ASSEMBLED_DNASE_TRAINING_DATA_FILES = expand(f'{TRAINING_DATA_DIR}/{DATA_TYPE}_{VER_GENOME}_training_data.partition{{k}}.rds',
#                                             k=list(range(1, 11)))

# add ChIP-seq peaks and bigwig signals ---------------------------------------------------------
METADATA_EXTENDED_TABLE_FILE = f'{METADATA_DIR}/{VER_GENOME}/{DATA_TYPE}_ChIP_extended_{MOTIF_SET}_training_data_table.tsv'

COMBINED_DNASE_CHIP_PEAKS_SIGNALS_DATA_FILE = f'{COMBINED_DNASE_CHIP_DATA_DIR}/{{tf_name}}_{{pwm_id}}_{THRESH_PVALUE}.{{cell_type}}.{BIN}_bins.chip_peaks_signals.combined_data.rds'

ALL_COMBINED_DNASE_CHIP_PEAKS_SIGNALS_DATA_FILES = expand(COMBINED_DNASE_CHIP_PEAKS_SIGNALS_DATA_FILE, zip, tf_name = ALL_TRAINING_TFS,
                                           pwm_id = ALL_TRAINING_PWMIDS, cell_type = ALL_TRAINING_CELLTYPES)

# Rules -----------------------------------------------------------------------

include: "rules/reads.smk"
include: "rules/sites.smk"
include: "rules/chip.smk"
include: "rules/dnase.smk"

rule all:
    input:
        ALL_COMBINED_DNASE_CHIP_DATA_FILES


rule all_data:
    input:
        ALL_SITES_FILES,
        ALL_DNASE_IDXSTATS_FILES,
        ALL_DNASE_GENOMECOUNTS_FWD_FILES,
        ALL_DNASE_GENOMECOUNTS_REV_FILES,
        ALL_DNASE_NORMALIZED_COUNTMATRIX_FILES,
        ALL_DNASE_BINS_FILES,
        ALL_CHIP_IDXSTATS_FILES,
        ALL_CHIP_COUNTS_FILES,
        ALL_COMBINED_DNASE_CHIP_DATA_FILES

rule list_data:
    shell:
        '''
        echo "TFs: {TRAINING_TF_SET}"
        echo "Cell types: {TRAINING_CELLTYPE_SET}"
        echo "DNase samples: {TRAINING_DNASE_SET}"
        echo "ChIP samples: {TRAINING_CHIP_SET}"
        '''

rule list_env:
    conda:
        'envs/top.yaml'
    shell:
        '''
        module load R/3.6.0
        samtools --version
        bedtools --version
        python --version
        python -c "import pandas as pd; print('pandas version: ' + pd.__version__)"
        R --version
        '''
