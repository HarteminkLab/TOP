model {
  for(i in 1:N) {
    chip_label[i] ~ dbern(p[i])

    # constrain the estimated linear predictor to between -20 and 20
    # to prevent arithmetic overflows
    logit(p[i]) <- max(-20, min(20,
      alpha[tf[i], cell_type[i]] +
      beta1[tf[i], cell_type[i]] * pwm[i] +
      beta2[tf[i], cell_type[i]] * bin1[i] +
      beta3[tf[i], cell_type[i]] * bin2[i] +
      beta4[tf[i], cell_type[i]] * bin3[i] +
      beta5[tf[i], cell_type[i]] * bin4[i] +
      beta6[tf[i], cell_type[i]] * bin5[i]))
  }

  # bottom level
  for(j in 1:n_tfs) {
    for(k in 1:n_cell_types) {
      alpha[j, k] ~ dnorm(Alpha[j], 1)
      beta1[j, k] ~ dnorm(Beta1[j], 1)
      beta2[j, k] ~ dnorm(Beta2[j], 1)
      beta3[j, k] ~ dnorm(Beta3[j], 1)
      beta4[j, k] ~ dnorm(Beta4[j], 1)
      beta5[j, k] ~ dnorm(Beta5[j], 1)
      beta6[j, k] ~ dnorm(Beta6[j], 1)
    }
  }

  # middle level
  for(j in 1:n_tfs) {
    Alpha[j] ~ dnorm(A, 1)
    Beta1[j] ~ dnorm(B1, 1)
    Beta2[j] ~ dnorm(B2, 1)
    Beta3[j] ~ dnorm(B3, 1)
    Beta4[j] ~ dnorm(B4, 1)
    Beta5[j] ~ dnorm(B5, 1)
    Beta6[j] ~ dnorm(B6, 1)
  }

  # top level
  A ~ dnorm(0, 1)
  B1 ~ dnorm(0, 1)
  B2 ~ dnorm(0, 1)
  B3 ~ dnorm(0, 1)
  B4 ~ dnorm(0, 1)
  B5 ~ dnorm(0, 1)
  B6 ~ dnorm(0, 1)
}
