[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Kaixuan Luo Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/data_preparation.html","id":"input-format","dir":"Articles","previous_headings":"","what":"Input format","title":"Prepare input data","text":"TOP requires data frame input data TF cell type. format input data frame: first six columns: chr, start, end, site name, strand, motif PWM score. next five columns (using M5 bins): five MILLIPEDE bins around motif matches. optional: one ChIP column response variable. quantitative TF occupancy (transformed ChIP-seq read counts) binary TF binding labels (ChIP-seq peaks). provided functions scripts generate input data frame. also welcome use scripts.","code":""},{"path":"/articles/data_preparation.html","id":"major-steps","dir":"Articles","previous_headings":"","what":"Major steps","title":"Prepare input data","text":"Step 1: Find TF motif matches using FIMO software scan TF motif matches, recommend FIMO software MEME suite: can follow instructions FIMO. need FIMO output file text format (fimo.txt) next step. use command line version FIMO. default, used threshold \\(p < 1e-5\\) uniform background training model. can choose background use FIMO’s default threshold \\(p < 1e-4\\) (result motif matches). Example FIMO command settings: Step 2: Get candidate TF binding sites take motif matches obtained FIMO candidate binding sites, add 100bp flanking regions sides motifs. filter candidate sites ENCODE blacklist regions /mapability threshold. Example function get candidate binding sites FIMO result. Example R script: ../scripts/get_candidate_sites.R. Step 3: Count DNase- ATAC-seq genome-wide cleavage first sort index BAM file DNase-seq ATAC-seq reads, print stats reads, used later normalizing read counts library sizes. Run samtools commands: use wrapper function: Next, count DNase- ATAC-seq counts along genome, save Bigwig format. reads counted allows us efficiently extract read counts around motif match positions different motifs. Example R script: ../scripts/count_dnase_genome_cuts.R. Step 4: Get DNase- ATAC-seq count matrices motif, normalize, bin transform counts Get DNase ATAC count matrices around candidate sites. Example R script:../scripts/get_dnase_motif_counts.R. Normalize, bin transform DNase- ATAC-seq counts. Example R script: ../scripts/normalize_bin_dnase.R. Step 5: Prepare ChIP-seq data want train model (optional) Add column ChIP counts (ChIP-seq reads) input data frame want train logistic version model. Example R script: ../scripts/count_chipseq_coverage.R. Add binary ChIP labels (ChIP-seq peaks) input data frame want train logistic version model Finally, combine PWM scores, DNase (ATAC) bins, ChIP-seq counts labels. Example R script: ../scripts/combine_dnase_chip_data.R.","code":"# outdir: the output directory # pwm: motif PWM file # ref_genome: reference genome file fimo --text --skip-matched-sequence --verbosity 2 \\   --bgfile --uniform-- \\   --thresh 1e-5 --max-stored-scores 1000000 \\   --oc outdir \\   pwm ref_genome # fimo_file: Filename of FIMO result. # sites_file: Filename of candidate sites. # flank: Flanking region (bp) around motif matches (default: 100) # thresh_pValue: FIMO p-value threshold. # blacklist_file Filename of the blacklist regions sites.df <- process_candidate_sites(fimo_file, sites_file,                                      flank=100, thresh_pValue=1e-5,                                      blacklist_file=blacklist_file) samtools sort sample.bam -o sample.sorted.bam samtools index sample.sorted.bam samtools idxstats sample.sorted.bam > sample.bam.idxstats.txt # bam_file: input BAM filename. # outdir: output directory. bam_sort_index_stats(bam_file, outdir) # bam_file: input BAM filename. # chrom_size_file: File name of genome sizes by chromosomes. # outdir: Output directory. # outname: Output filename prefix. count_dnase_genome_cuts(bam_file, chrom_size_file, outdir, outname) # sites_file: Filename for candidate sites # dnase_fwd_count_file: Filename for DNase or ATAC counts in forward strand (Bigwig format) # dnase_rev_count_file: Filename for DNase or ATAC counts in reverse strand (Bigwig format) # dnase_fwd_matrix_file: Filename for DNase or ATAC count matrix in forward strand # dnase_rev_matrix_file: Filename for DNase or ATAC count matrix in reverse strand dnase_counts <- get_dnase_sites_counts(file_sites, file_dnase_count_fwd, file_dnase_count_rev,                        file_dnase_matrix_fwd, file_dnase_matrix_rev) # dnase_counts: DNase or ATAC count matrix # idxstats_file: The idxstats file generated by samtools # ref.size: Scale to reference library size  # (Default: 100 million for DNase-seq and 50 million for ATAC-seq) # bin.method: MILLIPEDE binning scheme (Default: 'M5'). # transform: asinh or log2 transform of DNase counts. dnase_bins <- normalize_bin_dnase(dnase_counts, idxstats_file,                                    ref.size=1e8, bin.method='M5', transform='asinh') # pwm_id: Motif pwm ID # cell_type: Cell type # training_metadata: training metadata # sites_file: Filename for candidate sites # chrom_size_file: Filename for chromosome sizes # chip_dir: Directory of ChIP-seq bam files # outdir: Output directory # outname: Output filename prefix # ref.size: ChIP-Seq reference library size (Default: 10 million) chip_counts <- count_normalize_chip(pwm_id, cell_type, training_metadata,                                     sites_file, chrom_size_file, chip_dir,                                      outdir, outname, ref.size=1e7)"},{"path":"/articles/data_preparation.html","id":"snakemake-pipeline","dir":"Articles","previous_headings":"","what":"Snakemake pipeline","title":"Prepare input data","text":"provided Snakemake pipelines automate whole process using mentioned R scripts. Snakemake especially helpful many TFs (motifs) many cell types. Run Snakefile_training_ATAC ATAC-seq, Snakefile_training_DNase DNase-seq. details instructions running Snakemake pipelines, see Snakemake tutorial.","code":""},{"path":"/articles/installation.html","id":"install-top-r-package","dir":"Articles","previous_headings":"","what":"Install TOP R package","title":"Install TOP R package","text":"","code":"install.packages(\"devtools\") library(devtools) devtools::install_github(\"kevinlkx/TOP\")"},{"path":"/articles/installation.html","id":"load-top-r-package","dir":"Articles","previous_headings":"","what":"Load TOP R package","title":"Install TOP R package","text":"","code":"library(TOP)"},{"path":"/articles/predict_TF_occupancy_with_trained_model.html","id":"install-top-r-package","dir":"Articles","previous_headings":"","what":"Install TOP R package","title":"Predict TF occupancy using trained TOP model","text":"","code":"install.packages(\"devtools\") library(devtools) devtools::install_github(\"kevinlkx/TOP\")"},{"path":"/articles/predict_TF_occupancy_with_trained_model.html","id":"load-top-r-package","dir":"Articles","previous_headings":"","what":"Load TOP R package","title":"Predict TF occupancy using trained TOP model","text":"","code":"library(TOP)"},{"path":"/articles/predict_TF_occupancy_with_trained_model.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"Predict TF occupancy using trained TOP model","text":"input data data frame, including six columns. Columns left right PWM scores 5 DNase (ATAC) bins. can follow page prepare input data.","code":""},{"path":"/articles/predict_TF_occupancy_with_trained_model.html","id":"download-pre-trained-top-models","dir":"Articles","previous_headings":"","what":"Download pre-trained TOP models","title":"Predict TF occupancy using trained TOP model","text":"provide pre-trained models using ENCODE data .","code":""},{"path":"/articles/predict_TF_occupancy_with_trained_model.html","id":"predict-tf-occupancy-using-trained-top-model","dir":"Articles","previous_headings":"","what":"Predict TF occupancy using trained TOP model","title":"Predict TF occupancy using trained TOP model","text":"Predict TF occupancy using trained TOP regression coefficients","code":"predictions <- predict_TOP(data, TOP_mean_coef, logistic.model = FALSE,                            posterior.option = 'mean', transform = 'asinh')"},{"path":"/articles/predict_TF_occupancy_with_trained_model.html","id":"predict-tf-binding-probability-using-trained-top-logistic-model","dir":"Articles","previous_headings":"","what":"Predict TF binding probability using trained TOP logistic model","title":"Predict TF occupancy using trained TOP model","text":"Predict TF binding probability using trained TOP logistic regression coefficients","code":"predictions <- predict_TOP(data, TOP_logistic_mean_coef,                             logistic.model = TRUE, posterior.option = 'mean')"},{"path":"/articles/train_TOP_model_JAGS.html","id":"install-top-r-package","dir":"Articles","previous_headings":"","what":"Install TOP R package","title":"Train TOP model","text":"","code":"install.packages(\"devtools\") library(devtools) devtools::install_github(\"kevinlkx/TOP\")"},{"path":"/articles/train_TOP_model_JAGS.html","id":"load-top-r-package","dir":"Articles","previous_headings":"","what":"Load TOP R package","title":"Train TOP model","text":"","code":"library(TOP)"},{"path":"/articles/train_TOP_model_JAGS.html","id":"prepare-training-data","dir":"Articles","previous_headings":"","what":"Prepare training data","title":"Train TOP model","text":"Step 1: Prepare training data TF cell type TF cell type, prepare training data candidate binding sites: including: PWM scores, DNase (ATAC) bins, measured TF occupancy (ChIP-seq data). can follow pipeline prepare training data. Step 2: Assemble training data TF-cell type combinations Assemble training datasets training TF-cell type combinations, split training data 10 partitions.","code":"set.seed(123) max_sites <- 50000 total_partitions <- 10 max_sites_partition <- ceiling(max_sites/total_partitions) training_chrs <- paste0('chr', seq(1,21,2)) training_data_name <- 'TOP_training_data'  # Create a directory to save training data dir.create(training_data_dir, showWarnings = FALSE, recursive = TRUE)  for (k in 1:10) {   training_data <- assemble_TOP_training_data(tf_cell_table,                                               transform = 'asinh',                                               training_chrs = training_chrs,                                               sites_limit = max_sites_partition,                                               total_partitions = total_partitions,                                               n_part = k)   # Add TF and cell type indices   training_data$tf_id <- as.integer(factor(training_data$tf_name, levels = tf_list))   training_data$cell_id <- as.integer(factor(training_data$cell_type, levels = celltype_list))   saveRDS(training_data,            file.path(training_data_dir, paste0(training_data_name, '.partition', k, '.rds'))) }  # Save a table with all TF and cell type combinations tf_cell_combos <- unique(training_data[, c('tf_id', 'cell_id', 'tf_name', 'cell_type')]) cat(nrow(tf_cell_combos), 'TF x cell type combos. \\n') write.table(tf_cell_combos,              file.path(training_data_dir, paste0(training_data_name, '_tf_cell_combos.txt')),             sep = '\\t', col.names = TRUE, row.names = FALSE, quote = FALSE)"},{"path":"/articles/train_TOP_model_JAGS.html","id":"train-top-models-using-assembled-training-data","dir":"Articles","previous_headings":"","what":"Train TOP models using assembled training data","title":"Train TOP model","text":"Fit TOP model partition separately, save posterior samples. can set following parameters Gibbs sampling: n.iter: number total iterations per chain (including burn-iterations). n.burnin: number burn-iterations, .e. number iterations discard beginning. n.chains: number Markov chains. n.thin: thinning rate, must positive integer. save computation time, can run 10 partitions parallel separate compute nodes (access compute clusters).","code":"# Load TOP model model.file <- '../model/TOP_M5_model_jags_priorVar1.txt' # Create a directory to save results dir.create(top_model_dir, showWarnings = FALSE, recursive = TRUE)  # Fit TOP model for each partition separately # To save computation time, we can run these 10 partitions in parallel  # on separate compute nodes instead of using the for loop.  for (k in 1:10) {   # Load training data for each partition   data <- readRDS(file.path(training_data_dir, paste0(training_data_name, '.partition', k, '.rds')))   # Print TFs and cell types included in the training data   cat('Training TFs: ', levels(data$tf_name), '\\n')   cat('Training cell types: ', levels(data$cell_type), '\\n')   # Run Gibbs sampling to get TOP posterior samples   top_samples <- fit_TOP_M5_model(data, model.file, n.iter=10000, n.burnin=5000, n.chains=3, n.thin=10)   # Save TOP posterior samples for this partition   saveRDS(top_samples, paste0(top_model_dir, '/TOP_M5_fit_partition', k, '.posterior_samples.rds')) }"},{"path":"/articles/train_TOP_model_JAGS.html","id":"combine-top-posterior-samples-from-partitions-and-obtain-the-posterior-mean-of-the-regression-coefficients","dir":"Articles","previous_headings":"","what":"Combine TOP posterior samples from partitions and obtain the posterior mean of the regression coefficients","title":"Train TOP model","text":"training done, can combine posterior samples 10 partitions, obtain posterior mean regression coefficients. use make predictions TF occupancy using new DNase- ATAC-seq data, see page provide pre-trained models using ENCODE data ..","code":"# Combine TOP posterior samples from the 10 partitions and save the combined posterior samples TOP_samples_files <- file.path(top_model_dir, paste0('TOP_M5_fit_partition', 1:10, '.posterior_samples.rds')) TOP_samples <- combine_TOP_samples(TOP_samples_files, n_samples = n_samples) # load the table with all TF and cell type combinations tf_cell_combos <- read.table(tf_cell_combo_file, header=TRUE, sep='\\t', stringsAsFactors = FALSE) tf_cell_combos <- unique(tf_cell_combos[, c('tf_id', 'cell_id', 'tf_name', 'cell_type')]) # Extract posterior mean coefficients for all three levels TOP_mean_coef <- extract_TOP_mean_coef(TOP_samples, tf_cell_combos) # Save posterior samples and posterior mean of the regression coefficients saveRDS(TOP_samples, file.path(top_model_dir, 'TOP_M5_combined_posterior_samples.rds')) saveRDS(TOP_mean_coef, file.path(top_model_dir, 'TOP_M5_posterior_mean_coef.rds'))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kaixuan Luo. Author, maintainer. Jianling Zhong. Author. Alex Hartemink. Author, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Luo K, Zhong J, Hartemink (2021). TOP: Transcription factor Occupancy Profiler (TOP). R package version 0.0.0.9000, https://github.com/kevinlkx/TOP.","code":"@Manual{,   title = {TOP: Transcription factor Occupancy Profiler (TOP)},   author = {Kaixuan Luo and Jianling Zhong and Alex Hartemink},   year = {2021},   note = {R package version 0.0.0.9000},   url = {https://github.com/kevinlkx/TOP}, }"},{"path":"/index.html","id":"top-transcription-factor-occupancy-prediction","dir":"","previous_headings":"","what":"Transcription factor Occupancy Profiler (TOP)","title":"Transcription factor Occupancy Profiler (TOP)","text":"TOP fits Bayesian hierarchical model using motif information, DNase-seq ChIP-seq data multiple TFs multiple cell types. , can predict quantitative occupancy multiple transcription factors (TFs) using data single DNase-seq experiment.","code":""},{"path":"/index.html","id":"install-top-r-package","dir":"","previous_headings":"","what":"Install TOP R package","title":"Transcription factor Occupancy Profiler (TOP)","text":"Transcription factor Occupancy Profiler (TOP) fits Bayesian hierarchical model using transcription factor (TF) motif information, DNase ATAC-seq ChIP-seq data multiple TFs across multiple cell types conditions. can used predict quantitative occupancy (TF binding probability) many TFs using data single DNase- ATAC-seq experiment.","code":"install.packages(\"devtools\") library(devtools) devtools::install_github(\"kevinlkx/TOP\") library(TOP)"},{"path":"/index.html","id":"predict-tf-occupancy-using-top-model","dir":"","previous_headings":"","what":"Predict TF occupancy using TOP model","title":"Transcription factor Occupancy Profiler (TOP)","text":"instructions predict TF occupancy using TOP model. provide pre-trained models using ENCODE data ..","code":""},{"path":"/index.html","id":"train-your-own-top-model","dir":"","previous_headings":"","what":"Train your own TOP model","title":"Transcription factor Occupancy Profiler (TOP)","text":"can also train TOP models using data. instructions train TOP model. takes time train model many TFs cell types, training needs done . trained, can use model make predictions new data sets.","code":""},{"path":"/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Transcription factor Occupancy Profiler (TOP)","text":"Luo, K., Zhong, J., Safi, ., Hong, L., Tewari, ., Song, L., Reddy, T., Ma, L., Crawford, G., & Hartemink, . (2020) “Quantitative occupancy myriad transcription factors one DNase experiment enables efficient comparisons across conditions.” bioRxiv, bioRxiv:2020.06.28.171587.","code":""},{"path":"/reference/assemble_TOP_logistic_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble TOP (logistic version) training data for all TF x cell type combos,\nthen split training data into partitions\n#' — assemble_TOP_logistic_training_data","title":"Assemble TOP (logistic version) training data for all TF x cell type combos,\nthen split training data into partitions\n#' — assemble_TOP_logistic_training_data","text":"Assemble TOP (logistic version) training data TF x cell type combos, split training data partitions #'","code":""},{"path":"/reference/assemble_TOP_logistic_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble TOP (logistic version) training data for all TF x cell type combos,\nthen split training data into partitions\n#' — assemble_TOP_logistic_training_data","text":"","code":"assemble_TOP_logistic_training_data(   tf_cell_table,   chiplabel_colname = \"chip_label\",   training_chrs = paste0(\"chr\", seq(1, 21, 2)),   sites_limit = Inf,   total_partitions = 10,   k = 1 )"},{"path":"/reference/assemble_TOP_logistic_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble TOP (logistic version) training data for all TF x cell type combos,\nthen split training data into partitions\n#' — assemble_TOP_logistic_training_data","text":"tf_cell_table data frame TF name, cell type, links training data files. chiplabel_colname column name ChIP peak label combined data. training_chrs Chromosomes used training model. sites_limit Max number candidate sites partition. total_partitions split data partitions (default = 10) run Gibbs sampling parallel. k partition use training model","code":""},{"path":"/reference/assemble_TOP_logistic_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble TOP (logistic version) training data for all TF x cell type combos,\nthen split training data into partitions\n#' — assemble_TOP_logistic_training_data","text":"Returns data frame training data TFs cell type combos.","code":""},{"path":"/reference/assemble_TOP_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble TOP training data for all TF x cell type combos,\nthen split training data into partitions — assemble_TOP_training_data","title":"Assemble TOP training data for all TF x cell type combos,\nthen split training data into partitions — assemble_TOP_training_data","text":"Assemble TOP training data TF x cell type combos, split training data partitions","code":""},{"path":"/reference/assemble_TOP_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble TOP training data for all TF x cell type combos,\nthen split training data into partitions — assemble_TOP_training_data","text":"","code":"assemble_TOP_training_data(   tf_cell_table,   transform = c(\"asinh\", \"log2\", \"sqrt\", \"none\"),   training_chrs = paste0(\"chr\", seq(1, 21, 2)),   sites_limit = Inf,   total_partitions = 10,   k = 1 )"},{"path":"/reference/assemble_TOP_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble TOP training data for all TF x cell type combos,\nthen split training data into partitions — assemble_TOP_training_data","text":"tf_cell_table data frame TF name, cell type, links training data files. transform Transform ChIP read counts. Options 'asinh' (default), 'log2', 'sqrt', 'none'. training_chrs Chromosomes used training model. sites_limit Max number candidate sites partition. total_partitions split data partitions (default = 10) run Gibbs sampling parallel. k partition use training model","code":""},{"path":"/reference/assemble_TOP_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble TOP training data for all TF x cell type combos,\nthen split training data into partitions — assemble_TOP_training_data","text":"Returns data frame training data TFs cell type combos.","code":""},{"path":"/reference/bam_sort_index_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort and index the BAM file, and then retrieve and print stats in the index file. — bam_sort_index_stats","title":"Sort and index the BAM file, and then retrieve and print stats in the index file. — bam_sort_index_stats","text":"Sort index BAM file, retrieve print stats index file.","code":""},{"path":"/reference/bam_sort_index_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort and index the BAM file, and then retrieve and print stats in the index file. — bam_sort_index_stats","text":"","code":"bam_sort_index_stats(   bam_file,   outdir = NA,   sort = TRUE,   stats = TRUE,   samtools_path = \"samtools\" )"},{"path":"/reference/bam_sort_index_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort and index the BAM file, and then retrieve and print stats in the index file. — bam_sort_index_stats","text":"bam_file Input BAM file. outdir Output directory. sort logical. TRUE, sort (index) BAM file. stats logical. TRUE, retrieve print stats index file. samtools_path Path samtools executable.","code":""},{"path":"/reference/bin_dnase.html","id":null,"dir":"Reference","previous_headings":"","what":"Binning and transform DNase count matrix — bin_dnase","title":"Binning and transform DNase count matrix — bin_dnase","text":"Binning DNase using MILLIPEDE binning take asinh (log2) transform","code":""},{"path":"/reference/bin_dnase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binning and transform DNase count matrix — bin_dnase","text":"","code":"bin_dnase(   dnase_counts,   bin.method = c(\"M5\", \"M1\", \"M2\", \"M3\", \"M12\", \"M24\"),   transform = c(\"asinh\", \"log2\") )"},{"path":"/reference/bin_dnase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binning and transform DNase count matrix — bin_dnase","text":"dnase_counts DNase (ATAC) count matrix bin.method MILLIPEDE binning scheme (Default: 'M5'). transform asinh log2 transform DNase counts","code":""},{"path":"/reference/combine_TOP_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine and take the average of TOP posterior samples from all partitions — combine_TOP_samples","title":"Combine and take the average of TOP posterior samples from all partitions — combine_TOP_samples","text":"Combine take average TOP posterior samples partitions","code":""},{"path":"/reference/combine_TOP_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine and take the average of TOP posterior samples from all partitions — combine_TOP_samples","text":"","code":"combine_TOP_samples(TOP_samples_files, thin = 1, n.samples = 1000)"},{"path":"/reference/combine_TOP_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine and take the average of TOP posterior samples from all partitions — combine_TOP_samples","text":"TOP_samples_files file names posterior samples partitions thin thinning rate extract posterior samples, must positive integer. n.samples Randomly choose n.samples posterior samples, number posterior samples greater n.samples","code":""},{"path":"/reference/combine_dnase_bins_chip_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Combined normalized and binned DNase data with normalized ChIP counts data — combine_dnase_bins_chip_data","title":"Combined normalized and binned DNase data with normalized ChIP counts data — combine_dnase_bins_chip_data","text":"Combined normalized binned DNase data normalized ChIP counts data. function takes normalized DNase ChIP data replicates merged.","code":""},{"path":"/reference/combine_dnase_bins_chip_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combined normalized and binned DNase data with normalized ChIP counts data — combine_dnase_bins_chip_data","text":"","code":"combine_dnase_bins_chip_data(   dnase_counts_file,   chip_counts_file,   bin.method = \"M5\" )"},{"path":"/reference/combine_dnase_bins_chip_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combined normalized and binned DNase data with normalized ChIP counts data — combine_dnase_bins_chip_data","text":"dnase_counts_file Normalized DNase counts files chip_counts_file Normalized ChIP counts files bin.method MILLIPEDE binning scheme (Default: 'M5')","code":""},{"path":"/reference/compute_mapability.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — compute_mapability","title":"Title — compute_mapability","text":"Title","code":""},{"path":"/reference/compute_mapability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — compute_mapability","text":"","code":"compute_mapability(   sites,   mapability_file,   bigWigAverageOverBed_path = \"bigWigAverageOverBed\" )"},{"path":"/reference/compute_mapability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — compute_mapability","text":"sites data frame candidate binding sites first 6 columns BED format mapability_file ENCODE mapability bigWig file bigWigAverageOverBed_path path bigWigAverageOverBed executable","code":""},{"path":"/reference/count_dnase_genome_cuts.html","id":null,"dir":"Reference","previous_headings":"","what":"Count DNase-seq or ATAC-seq cleavage for a given genome. — count_dnase_genome_cuts","title":"Count DNase-seq or ATAC-seq cleavage for a given genome. — count_dnase_genome_cuts","text":"Count DNase-seq ATAC-seq cleavage given genome.","code":""},{"path":"/reference/count_dnase_genome_cuts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count DNase-seq or ATAC-seq cleavage for a given genome. — count_dnase_genome_cuts","text":"","code":"count_dnase_genome_cuts(   bam_file,   chrom_size_file,   outdir,   outname,   bedtools_path = \"bedtools\",   bedGraphToBigWig_path = \"bedGraphToBigWig\",   bedSort_path = \"bedSort\" )"},{"path":"/reference/count_dnase_genome_cuts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count DNase-seq or ATAC-seq cleavage for a given genome. — count_dnase_genome_cuts","text":"bam_file Sorted BAM file. chrom_size_file File name genome sizes chromosomes. outdir Output directory. outname Output prefix. bedtools_path Path bedtools executable. bedGraphToBigWig_path Path UCSC bedGraphToBigWig executable. bedSort_path Path UCSC bedSort executable.","code":""},{"path":"/reference/count_normalize_chip.html","id":null,"dir":"Reference","previous_headings":"","what":"Count and normalize ChIP-seq read coverage — count_normalize_chip","title":"Count and normalize ChIP-seq read coverage — count_normalize_chip","text":"Count normalize ChIP-seq read coverage","code":""},{"path":"/reference/count_normalize_chip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count and normalize ChIP-seq read coverage — count_normalize_chip","text":"","code":"count_normalize_chip(   pwm_id,   cell_type,   training_metadata,   sites_file,   chrom_size_file,   chip_dir,   outdir,   outname,   ref.size = 1e+07,   bedtools_path = \"bedtools\" )"},{"path":"/reference/count_normalize_chip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count and normalize ChIP-seq read coverage — count_normalize_chip","text":"pwm_id Motif pwm ID cell_type Cell type training_metadata training metadata sites_file Filename candidate sites chrom_size_file Filename chromosome sizes chip_dir Directory ChIP-seq bam files outdir Output directory outname Output filename prefix ref.size ChIP-Seq reference library size (Default: 10 million) bedtools_path Path bedtools executable","code":""},{"path":"/reference/extract_TOP_coef_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract alpha and beta coefficients from TOP posterior samples — extract_TOP_coef_samples","title":"Extract alpha and beta coefficients from TOP posterior samples — extract_TOP_coef_samples","text":"Extract alpha beta coefficients TOP posterior samples","code":""},{"path":"/reference/extract_TOP_coef_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract alpha and beta coefficients from TOP posterior samples — extract_TOP_coef_samples","text":"","code":"extract_TOP_coef_samples(   TOP_samples,   tf_cell_combos,   tf_name,   cell_type,   n.bins = 5,   level = c(\"bottom\", \"middle\", \"top\") )"},{"path":"/reference/extract_TOP_coef_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract alpha and beta coefficients from TOP posterior samples — extract_TOP_coef_samples","text":"TOP_samples TOP samples combined partitions tf_cell_combos table TF x cell type combinations tf_name TF name interest cell_type Cell type interest n.bins Number DNase ATAC bins TOP model (default = 5) level level TOP model (bottom, middle, top), 'bottom' level: TF- cell-type- specific, 'middle' level: TF-specific, cell-type generic, 'top' level: TF-generic","code":""},{"path":"/reference/extract_TOP_mean_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute TOP posterior mean coefficients for all three levels of TOP model — extract_TOP_mean_coef","title":"Compute TOP posterior mean coefficients for all three levels of TOP model — extract_TOP_mean_coef","text":"Compute TOP posterior mean coefficients three levels TOP model","code":""},{"path":"/reference/extract_TOP_mean_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute TOP posterior mean coefficients for all three levels of TOP model — extract_TOP_mean_coef","text":"","code":"extract_TOP_mean_coef(TOP_samples, tf_cell_combos, n.bins = 5)"},{"path":"/reference/extract_TOP_mean_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute TOP posterior mean coefficients for all three levels of TOP model — extract_TOP_mean_coef","text":"TOP_samples TOP samples combined partitions tf_cell_combos table TF x cell type combinations n.bins Number DNase ATAC bins TOP model (default = 5)","code":""},{"path":"/reference/filter_blacklist.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter sites in ENCODE blacklist regions — filter_blacklist","title":"Filter sites in ENCODE blacklist regions — filter_blacklist","text":"Filter sites ENCODE blacklist regions","code":""},{"path":"/reference/filter_blacklist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter sites in ENCODE blacklist regions — filter_blacklist","text":"","code":"filter_blacklist(sites.df, blacklist_file)"},{"path":"/reference/filter_blacklist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter sites in ENCODE blacklist regions — filter_blacklist","text":"sites.df data frame candidate binding sites blacklist_file ENCODE blacklist file","code":""},{"path":"/reference/fit_TOP_M5_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit TOP model — fit_TOP_M5_model","title":"Fit TOP model — fit_TOP_M5_model","text":"Fit TOP model","code":""},{"path":"/reference/fit_TOP_M5_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit TOP model — fit_TOP_M5_model","text":"","code":"fit_TOP_M5_model(   data,   model,   n.iter = 10000,   n.burnin = 5000,   n.chains = 3,   n.thin = 10 )"},{"path":"/reference/fit_TOP_M5_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit TOP model — fit_TOP_M5_model","text":"data combined training data. model TOP model (written BUGS code). n.iter number total iterations per chain (including burn ). n.burnin length burn , .e. number iterations discard beginning. n.chains number Markov chains. n.thin thinning rate, must positive integer.","code":""},{"path":"/reference/fit_TOP_logistic_M5_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit TOP logistic model — fit_TOP_logistic_M5_model","title":"Fit TOP logistic model — fit_TOP_logistic_M5_model","text":"Fit TOP logistic model","code":""},{"path":"/reference/fit_TOP_logistic_M5_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit TOP logistic model — fit_TOP_logistic_M5_model","text":"","code":"fit_TOP_logistic_M5_model(   data,   model,   n.iter = 10000,   n.burnin = 5000,   n.chains = 3,   n.thin = 10 )"},{"path":"/reference/fit_TOP_logistic_M5_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit TOP logistic model — fit_TOP_logistic_M5_model","text":"data combined training data. model TOP logistic model (written BUGS code). n.iter number total iterations per chain (including burn ). n.burnin length burn , .e. number iterations discard beginning. n.chains number Markov chains. n.thin thinning rate, must positive integer.","code":""},{"path":"/reference/flank_fimo_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Get candidate sites using FIMO motifs with flanking regions — flank_fimo_sites","title":"Get candidate sites using FIMO motifs with flanking regions — flank_fimo_sites","text":"Get candidate sites using FIMO motifs flanking regions","code":""},{"path":"/reference/flank_fimo_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get candidate sites using FIMO motifs with flanking regions — flank_fimo_sites","text":"","code":"flank_fimo_sites(fimo_file, flank = 100)"},{"path":"/reference/flank_fimo_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get candidate sites using FIMO motifs with flanking regions — flank_fimo_sites","text":"fimo_file FIMO result .txt file flank Flanking region (bp) around motif matches (default: 100)","code":""},{"path":"/reference/get_dnase_sites_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get DNase count matrices for candidate sites. — get_dnase_sites_counts","title":"Get DNase count matrices for candidate sites. — get_dnase_sites_counts","text":"Get DNase count matrices candidate sites.","code":""},{"path":"/reference/get_dnase_sites_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get DNase count matrices for candidate sites. — get_dnase_sites_counts","text":"","code":"get_dnase_sites_counts(   sites_file,   dnase_fwd_count_file,   dnase_rev_count_file,   dnase_fwd_matrix_file,   dnase_rev_matrix_file,   bwtool_path = \"bwtool\" )"},{"path":"/reference/get_dnase_sites_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get DNase count matrices for candidate sites. — get_dnase_sites_counts","text":"sites_file Filename candidate sites dnase_fwd_count_file Filename DNase counts forward strand (Bigwig format) dnase_rev_count_file Filename DNase counts reverse strand (Bigwig format) dnase_fwd_matrix_file Filename DNase count matrix forward strand dnase_rev_matrix_file Filename DNase count matrix reverse strand bwtool_path Path bwtool executable.","code":""},{"path":"/reference/get_total_reads.html","id":null,"dir":"Reference","previous_headings":"","what":"Get total number of mapped reads from the idxstats file generated by samtools — get_total_reads","title":"Get total number of mapped reads from the idxstats file generated by samtools — get_total_reads","text":"Get total number mapped reads idxstats file generated samtools","code":""},{"path":"/reference/get_total_reads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get total number of mapped reads from the idxstats file generated by samtools — get_total_reads","text":"","code":"get_total_reads(   idxstats_file,   select.chr = TRUE,   chrs = paste0(\"chr\", c(1:22)) )"},{"path":"/reference/get_total_reads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get total number of mapped reads from the idxstats file generated by samtools — get_total_reads","text":"idxstats_file idxstats file generated samtools. select.chr TRUE, use chromosomes idxstats file. FALSE, select chromosomes chrs. chrs Chromosomes included.","code":""},{"path":"/reference/load_TOP_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Load TOP posterior samples — load_TOP_samples","title":"Load TOP posterior samples — load_TOP_samples","text":"Load TOP posterior samples","code":""},{"path":"/reference/load_TOP_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load TOP posterior samples — load_TOP_samples","text":"","code":"load_TOP_samples(TOP_samples_file, thin = 1, n.samples = 1000)"},{"path":"/reference/load_TOP_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load TOP posterior samples — load_TOP_samples","text":"TOP_samples_file file names posterior samples partitions thin thinning rate extract posterior samples, must positive integer. n.samples Randomly choose n.samples posterior samples, number posterior samples greater n.samples","code":""},{"path":"/reference/merge_normalize_dnase_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge DNase counts, then normalize merged DNase counts data. — merge_normalize_dnase_counts","title":"Merge DNase counts, then normalize merged DNase counts data. — merge_normalize_dnase_counts","text":"Merge DNase counts, normalize DNase counts library size scaling.","code":""},{"path":"/reference/merge_normalize_dnase_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge DNase counts, then normalize merged DNase counts data. — merge_normalize_dnase_counts","text":"","code":"merge_normalize_dnase_counts(   dnase_counts_files,   dnase_idxstats_files,   ref.size = 1e+08 )"},{"path":"/reference/merge_normalize_dnase_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge DNase counts, then normalize merged DNase counts data. — merge_normalize_dnase_counts","text":"dnase_counts_files DNase counts files dnase_idxstats_files DNase idxstats files generated samtools ref.size Scale DNase-seq reference library size (Default: 100 million DNase-seq)","code":""},{"path":"/reference/millipede_binning.html","id":null,"dir":"Reference","previous_headings":"","what":"Count DNase cuts with different MILLIPEDE binning settings. — millipede_binning","title":"Count DNase cuts with different MILLIPEDE binning settings. — millipede_binning","text":"Count DNase cuts different MILLIPEDE binning settings.","code":""},{"path":"/reference/millipede_binning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count DNase cuts with different MILLIPEDE binning settings. — millipede_binning","text":"","code":"millipede_binning(data, combine_strands = c(\"vertical\", \"motif\"))"},{"path":"/reference/millipede_binning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count DNase cuts with different MILLIPEDE binning settings. — millipede_binning","text":"data DNase data matrix, rows candidate sites, columns DNase cuts 100bp flanks around motifs forward reverse strands combine_strands Method combine DNase cuts M24 bins strands M12 bins: 'vertical' (default) 'motif'.","code":""},{"path":"/reference/normalize_bin_dnase.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize, binning and transform DNase counts — normalize_bin_dnase","title":"Normalize, binning and transform DNase counts — normalize_bin_dnase","text":"Normalize DNase counts library size, binning DNase using MILLIPEDE binning take asinh log2 transform","code":""},{"path":"/reference/normalize_bin_dnase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize, binning and transform DNase counts — normalize_bin_dnase","text":"","code":"normalize_bin_dnase(   dnase_counts,   idxstats_file,   ref.size = 1e+08,   bin.method = c(\"M5\", \"M1\", \"M2\", \"M3\", \"M12\", \"M24\"),   transform = c(\"asinh\", \"log2\") )"},{"path":"/reference/normalize_bin_dnase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize, binning and transform DNase counts — normalize_bin_dnase","text":"dnase_counts DNase count matrix idxstats_file idxstats file generated samtools ref.size Scale DNase-seq reference library size (Default: 100 million) bin.method MILLIPEDE binning scheme (Default: 'M5'). transform asinh log2 transform DNase counts.","code":""},{"path":"/reference/normalize_chip.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize and transform ChIP counts — normalize_chip","title":"Normalize and transform ChIP counts — normalize_chip","text":"Normalize transform ChIP counts","code":""},{"path":"/reference/normalize_chip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize and transform ChIP counts — normalize_chip","text":"","code":"normalize_chip(   chip_counts,   idxstats_file,   ref.size = 1e+07,   transform = \"asinh\" )"},{"path":"/reference/normalize_chip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize and transform ChIP counts — normalize_chip","text":"chip_counts ChIP-seq counts idxstats_file idxstats file generated samtools ref.size ChIP-Seq reference library size (Default: 10 million) transform log2 asinh transform","code":""},{"path":"/reference/normalize_dnase.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize DNase counts — normalize_dnase","title":"Normalize DNase counts — normalize_dnase","text":"Normalize DNase counts library size scaling, bin DNase using MILLIPEDE binning take log2 asinh transform","code":""},{"path":"/reference/normalize_dnase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize DNase counts — normalize_dnase","text":"","code":"normalize_dnase(dnase_counts, idxstats_file, ref.size = 1e+08)"},{"path":"/reference/normalize_dnase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize DNase counts — normalize_dnase","text":"dnase_counts DNase count matrix idxstats_file idxstats file generated samtools ref.size Scale DNase-seq reference library size (Default: 100 million)","code":""},{"path":"/reference/predict_TOP.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict quantitative TF occupancy or TF binding probability — predict_TOP","title":"Predict quantitative TF occupancy or TF binding probability — predict_TOP","text":"Predict quantitative TF occupancy TF binding probability using TOP model trained ChIP-seq read counts binary labels.","code":""},{"path":"/reference/predict_TOP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict quantitative TF occupancy or TF binding probability — predict_TOP","text":"","code":"predict_TOP(   data,   TOP_model,   logistic.model = FALSE,   posterior.option = c(\"mean\", \"samples\"),   transform = c(\"asinh\", \"log2\", \"log\", \"none\") )"},{"path":"/reference/predict_TOP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict quantitative TF occupancy or TF binding probability — predict_TOP","text":"data data frame. Columns motif score DNase (ATAC) bins. Rows candidate sites. TOP_model TOP posterior samples posterior mean regression coefficients. logistic.model TRUE, use logistic version model predict TF binding probability. posterior.option \"samples\": uses posterior samples, \"mean\": uses posterior mean trained regression coefficients transform Method used transform ChIP-seq counts training TOP quantitative model. Options: asinh, log2, log, none. apply logistic version.","code":""},{"path":"/reference/predict_TOP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict quantitative TF occupancy or TF binding probability — predict_TOP","text":"function returns vector predicted TF occupancy.","code":""},{"path":"/reference/predict_TOP_logistic_mean_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict TF binding by TOP logistic model\nwith posterior mean of regression coefficients — predict_TOP_logistic_mean_coef","title":"Predict TF binding by TOP logistic model\nwith posterior mean of regression coefficients — predict_TOP_logistic_mean_coef","text":"Predict TF binding using posterior mean regression coefficients trained TOP logistic model","code":""},{"path":"/reference/predict_TOP_logistic_mean_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict TF binding by TOP logistic model\nwith posterior mean of regression coefficients — predict_TOP_logistic_mean_coef","text":"","code":"predict_TOP_logistic_mean_coef(data, mean_coef)"},{"path":"/reference/predict_TOP_logistic_mean_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict TF binding by TOP logistic model\nwith posterior mean of regression coefficients — predict_TOP_logistic_mean_coef","text":"data data frame. Columns motif score DNase (ATAC) bins. Rows candidate sites. mean_coef numeric vector. posterior mean trained regression coefficients, including intercept coefficients motif score DNase features. length(mean_coef) equal 1+ncol(data).","code":""},{"path":"/reference/predict_TOP_logistic_mean_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict TF binding by TOP logistic model\nwith posterior mean of regression coefficients — predict_TOP_logistic_mean_coef","text":"function returns vector predicted TF binding probabilities","code":""},{"path":"/reference/predict_TOP_mean_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict TF occupancy using posterior mean of regression coefficients — predict_TOP_mean_coef","title":"Predict TF occupancy using posterior mean of regression coefficients — predict_TOP_mean_coef","text":"Predict TF occupancy using posterior mean regression coefficients trained TOP model","code":""},{"path":"/reference/predict_TOP_mean_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict TF occupancy using posterior mean of regression coefficients — predict_TOP_mean_coef","text":"","code":"predict_TOP_mean_coef(   data,   mean_coef,   transform = c(\"asinh\", \"log2\", \"log\", \"none\") )"},{"path":"/reference/predict_TOP_mean_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict TF occupancy using posterior mean of regression coefficients — predict_TOP_mean_coef","text":"data data frame. Columns motif score DNase (ATAC) bins. Rows candidate sites. mean_coef numeric vector. posterior mean trained regression coefficients, including intercept coefficients motif score DNase features. length(mean_coef) equal 1+ncol(data). transform Method used transform ChIP-seq counts training TOP model. Options: asinh, log2, log, none.","code":""},{"path":"/reference/predict_TOP_mean_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict TF occupancy using posterior mean of regression coefficients — predict_TOP_mean_coef","text":"function returns vector predicted TF occupancy.","code":""},{"path":"/reference/predict_TOP_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict TF occupancy using posterior samples of regression coefficients — predict_TOP_samples","title":"Predict TF occupancy using posterior samples of regression coefficients — predict_TOP_samples","text":"Predict TF occupancy using posterior samples regression coefficients trained TOP model","code":""},{"path":"/reference/predict_TOP_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict TF occupancy using posterior samples of regression coefficients — predict_TOP_samples","text":"","code":"predict_TOP_samples(   data,   TOP_samples,   use.posterior.mean = FALSE,   sample.predictions = TRUE,   transform = c(\"asinh\", \"log2\", \"log\", \"none\") )"},{"path":"/reference/predict_TOP_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict TF occupancy using posterior samples of regression coefficients — predict_TOP_samples","text":"data data frame. Columns motif score DNase (ATAC) bins. Rows candidate sites. TOP_samples TOP posterior samples. use.posterior.mean TRUE, uses posterior mean regression coefficients make predictions. sample.predictions TRUE, sample posterior predictions take mean posterior prediction samples. transform Method used transform ChIP-seq counts training TOP model. Options: asinh, log2, log, none.","code":""},{"path":"/reference/predict_TOP_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict TF occupancy using posterior samples of regression coefficients — predict_TOP_samples","text":"function returns vector predicted TF occupancy.","code":""},{"path":"/reference/process_candidate_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Full process to get candidate sites from FIMO result — process_candidate_sites","title":"Full process to get candidate sites from FIMO result — process_candidate_sites","text":"Full process get candidate sites FIMO result","code":""},{"path":"/reference/process_candidate_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full process to get candidate sites from FIMO result — process_candidate_sites","text":"","code":"process_candidate_sites(   fimo_file,   sites_file,   flank = 100,   thresh_pValue = 1e-05,   blacklist_file,   mapability_file,   out_file,   bigWigAverageOverBed_path = \"bigWigAverageOverBed\" )"},{"path":"/reference/process_candidate_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full process to get candidate sites from FIMO result — process_candidate_sites","text":"fimo_file Filename FIMO result. sites_file Filename candidate sites. flank Flanking region (bp) around motif matches (default: 100) thresh_pValue FIMO p-value threshold. blacklist_file Filename blacklist regions mapability_file Filename mapability reference file bigWig format. out_file Filename processed candidate sites. bigWigAverageOverBed_path Path bigWigAverageOverBed executable. needed computing mapability.","code":""},{"path":"/reference/rev_count_bwtool.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip the counts generated from bwtool for motifs on the reverse (minus) strand — rev_count_bwtool","title":"Flip the counts generated from bwtool for motifs on the reverse (minus) strand — rev_count_bwtool","text":"Flip counts generated bwtool motifs reverse (minus) strand","code":""},{"path":"/reference/rev_count_bwtool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip the counts generated from bwtool for motifs on the reverse (minus) strand — rev_count_bwtool","text":"","code":"rev_count_bwtool(sites_file, dnase_fwd_matrix_file, dnase_rev_matrix_file)"},{"path":"/reference/rev_count_bwtool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip the counts generated from bwtool for motifs on the reverse (minus) strand — rev_count_bwtool","text":"sites_file Filename candidate sites dnase_fwd_matrix_file Filename DNase count matrix forward strand dnase_rev_matrix_file Filename DNase count matrix reverse strand","code":""},{"path":"/reference/select_model_coef_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Select TOP model hierarchy level — select_model_coef_mean","title":"Select TOP model hierarchy level — select_model_coef_mean","text":"TF motif available training data model_level='best', use TF-specific model TF motif; otherwise, use top level TF-generic model.","code":""},{"path":"/reference/select_model_coef_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select TOP model hierarchy level — select_model_coef_mean","text":"","code":"select_model_coef_mean(   pwm_id,   cell_type,   tf_pwm_training_list,   model_coefficients,   model_level = c(\"best\", \"bottom\", \"middle\", \"top\") )"},{"path":"/reference/select_model_coef_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select TOP model hierarchy level — select_model_coef_mean","text":"pwm_id Motif PWM ID cell_type Cell type tf_pwm_training_list List TF motifs available coefficients trained. model_coefficients Trained TOP model regression coefficients model_level Specific TOP model hierarchy level: 'top', 'bottom', 'middle', 'best'. Default: 'best', lowest hierarchy level model used.","code":""},{"path":"/reference/sort_merge_overlap_bedgraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort and merge the overlapping sites,\nremove the overlapping sites with lower occupancy — sort_merge_overlap_bedgraph","title":"Sort and merge the overlapping sites,\nremove the overlapping sites with lower occupancy — sort_merge_overlap_bedgraph","text":"Sort merge overlapping sites, remove overlapping sites lower occupancy","code":""},{"path":"/reference/sort_merge_overlap_bedgraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort and merge the overlapping sites,\nremove the overlapping sites with lower occupancy — sort_merge_overlap_bedgraph","text":"","code":"sort_merge_overlap_bedgraph(predicted_bedgraph.df)"},{"path":"/reference/sort_merge_overlap_bedgraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort and merge the overlapping sites,\nremove the overlapping sites with lower occupancy — sort_merge_overlap_bedgraph","text":"predicted_bedgraph.df predicted TF occupancy bedgraph format","code":""},{"path":"/reference/track_def_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Set genome browser track parameters for predictions in bedGraph format — track_def_line","title":"Set genome browser track parameters for predictions in bedGraph format — track_def_line","text":"Set genome browser track parameters predictions bedGraph format","code":""},{"path":"/reference/track_def_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set genome browser track parameters for predictions in bedGraph format — track_def_line","text":"","code":"track_def_line(   tf_name,   pwm_id,   cell_type,   rep_name,   type_model,   viewMax = 100,   mycolor = \"0,0,0\" )"},{"path":"/reference/track_def_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set genome browser track parameters for predictions in bedGraph format — track_def_line","text":"tf_name TF name pwm_id PWM ID cell_type cell type rep_name replicate name type_model model type viewMax upper limit view TF occupancy genome browser mycolor color track","code":""}]
